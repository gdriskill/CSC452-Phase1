phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
testcase_main(): started
EXPECTATION: testcase_main() creates a single 'victim' process XXp3(), which runs at the same priority as testcase_main().  XXp3() is in an infinite loop, copying the 'count' variable to 'countDuplicate', and otherwise just burning CPU time until 'count' reaches N.  After XXp3() is running, testcase_main() creates high-priority children; each increments 'count' and then tries to zap XXp3().  But testcase_main() won't count the new child as created until XXp3() has chewed up a timeslice, updating the 'duplicate' counter as it does so.  Thus, this testcase will not work properly until you have implemented interrupt-based timeslicing, so that XXp3() can run full-bore and still get interrupted to go back to testcase_main().
testcase_main(): fork1 creating child i=0 -- a new child will run next
XXp2() 0: getpid()=5
XXp2() 0: zapping XXp3    current count: 1
XXp3(): started.  Entering the while() loop.
testcase_main(): fork1 has completed, pid=5
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=1 -- a new child will run next
XXp2() 1: getpid()=6
XXp2() 1: zapping XXp3    current count: 2
testcase_main(): fork1 has completed, pid=6
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=2 -- a new child will run next
XXp2() 2: getpid()=7
XXp2() 2: zapping XXp3    current count: 3
testcase_main(): fork1 has completed, pid=7
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=3 -- a new child will run next
XXp2() 3: getpid()=8
XXp2() 3: zapping XXp3    current count: 4
testcase_main(): fork1 has completed, pid=8
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=4 -- a new child will run next
XXp2() 4: getpid()=9
XXp2() 4: zapping XXp3    current count: 5
testcase_main(): fork1 has completed, pid=9
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=5 -- a new child will run next
XXp2() 5: getpid()=10
XXp2() 5: zapping XXp3    current count: 6
testcase_main(): fork1 has completed, pid=10
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=6 -- a new child will run next
XXp2() 6: getpid()=11
XXp2() 6: zapping XXp3    current count: 7
testcase_main(): fork1 has completed, pid=11
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=7 -- a new child will run next
XXp2() 7: getpid()=12
XXp2() 7: zapping XXp3    current count: 8
testcase_main(): fork1 has completed, pid=12
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=8 -- a new child will run next
XXp2() 8: getpid()=13
XXp2() 8: zapping XXp3    current count: 9
testcase_main(): fork1 has completed, pid=13
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): fork1 creating child i=9 -- a new child will run next
XXp2() 9: getpid()=14
XXp2() 9: zapping XXp3    current count: 10
XXp3(): count = 10 -- the while loop has ended!
XXp3(): terminating -- all of the XXp2() processes will unblock, and will all run in quick succession.  testcase_main() will not run until all of them have died.
XXp2() 9: after zap.  This process will now terminate.
XXp2() 8: after zap.  This process will now terminate.
XXp2() 7: after zap.  This process will now terminate.
XXp2() 6: after zap.  This process will now terminate.
XXp2() 5: after zap.  This process will now terminate.
XXp2() 4: after zap.  This process will now terminate.
XXp2() 3: after zap.  This process will now terminate.
XXp2() 2: after zap.  This process will now terminate.
XXp2() 1: after zap.  This process will now terminate.
XXp2() 0: after zap.  This process will now terminate.
testcase_main(): fork1 has completed, pid=14
>>>>> Entering spinloop in testcase_main(), until count and countDuplicate are equal.  Depending on how your scheduler works, this might end immediately (if XXp3() has already done the copy), or it might run for a long while.
<<<<< spinloop complete.

testcase_main(): Calling join() the first time.  Depending on how the race with XXp3() runs, this may happen before XXp3() ends its loop, and thus it will block; or it may happen after XXp3() terminates, and thus it will terminate immediately - as will *all* of the join()s, since all of the XXp2() processes will also be dead.
testcase_main: join() returned pid 14 status 3
testcase_main: join() returned pid 13 status 3
testcase_main: join() returned pid 12 status 3
testcase_main: join() returned pid 11 status 3
testcase_main: join() returned pid 10 status 3
testcase_main: join() returned pid 9 status 3
testcase_main: join() returned pid 8 status 3
testcase_main: join() returned pid 7 status 3
testcase_main: join() returned pid 6 status 3
testcase_main: join() returned pid 5 status 3
testcase_main: join() returned pid 4 status 4
TESTCASE ENDED: Call counts:   check_io() 0   clockHandler() <nonzero>
