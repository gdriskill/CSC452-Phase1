phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
testcase_main(): started
EXPECTATION: testcase_main() creates a single XXp1() child.  XXp1() creates two XXp2() children, but both are priority 5 (so lower than XXp1, and same as testcase_main()).  XXp1() zaps its first child, which blocks it; then testcase_main() executes dumpProcesses(); then it blocks on join().  The first XXp2() process runs and ends; then XXp1() wakes up from zap(), and starts to zap() the second.  Second runs and ends.  XXp1() join()s twice and dies, after which testcase_main() wakes up from join and dies as well.
XXp1(): started, pid = 4
XXp1(): arg = 'XXp1'
XXp1(): executing fork of first child
XXp1(): fork1 of first child returned pid = 5
XXp1(): executing fork of second child
XXp1(): fork1 of second child returned pid = 6
XXp1(): zap'ing first child
testcase_main(): after fork of child 4 -- you should not see this until XXp1() is blocked in its first zap()
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  sentinel          7         Runnable
   3     1  testcase_main     3         Running
   4     3  XXp1              2         Blocked(waiting for zap target to quit)
   5     4  XXp2              5         Runnable
   6     4  XXp2              5         Runnable
testcase_main(): performing join
XXp2(): started, pid = 5
XXp2(): arg = 'XXp2'
XXp2(): terminating.
XXp1(): after zap'ing first child
XXp1(): zap'ing second child
XXp2(): started, pid = 6
XXp2(): arg = 'XXp2'
XXp2(): terminating.
XXp1(): after zap'ing second child
XXp1(): performing join's
XXp1(): first join returned kidpid = 6, status = 5
XXp1(): second join returned kidpid = 5, status = 5
XXp1(): terminating.
testcase_main(): exit status for child 4 is 3
TESTCASE ENDED: Call counts:   check_io() 0   clockHandler() 0
